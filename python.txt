----
Date
----

Datetime representations:
    timestamp (float) -- seconds since the epoch (tz independent)
    struct_time -- a sequence of 9 integers (tz naive)
    datetime -- an object (tz naive [1])

Functions for getting the current datetime:
    time.gmtime() -> current struct_time in UTC
    time.localtime() -> current struct_time in local time
    datetime.utcnow() -> current datetime in UTC
    datetime.now() -> current datetime in local time

Conversion functions:
    time.gmtime(timestamp) -> struct_time in UTC
    time.localtime(timestamp) -> struct_time in local time
    calendar.timegm(struct_time) in UTC -> timestamp
    time.mktime(struct_time) in local time -> timestamp
    datetime.utcfromtimestamp(timestamp) -> datetime in UTC
    datetime.fromtimestamp(timestamp) -> datetime in local time
    datetime.timetuple(self) -> struct_time
    datetime.datetime(*list(struct_time)[0:6]) -> datetime

Printing functions:
    time.ctime(timestamp) -> str
    time.asctime(struct_time) -> str
    time.strftime(format, struct_time) -> str
    datetime.isoformat(self) -> str
    datetime.ctime(self) -> str
    datetime.strftime(self) -> str

Parsing functions:
    time.strptime(string, format) -> struct_time
    datetime.strptime(string, format) -> datetime

[1] There is tz aware `datetime` as well, but I don't deal with that here.

----------
Subprocess
----------

Reading the output
    output=`mycmd myarg`
    ==>
    output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]

Pipeline
    output=`dmesg | grep hda`
    ==>
    p1 = Popen(["dmesg"], stdout=PIPE)
    p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
    output = p2.communicate()[0]

Command as a string
    subprocess.call("mycmd myarg", shell=True)

Command as a list
    subprocess.call(["mycmd", "myarg"])

System call
    sts = os.system("mycmd myarg")
    ==>
    p = Popen("mycmd myarg", shell=True)
    sts = os.waitpid(p.pid, 0)[1]

-------------
File handling
-------------

Temporary file
    fd, filename = tempfile.mkstemp([suffix, prefix])
    os.close(fd)

Temporary directory
    dirname = tempfile.mkdtemp([suffix, prefix])

abspath, basename, pathname:
    os.path.abspath(path)
    os.path.basename(path)
    os.path.dirname(path)
    os.path.normpath(path)

Tests:
    -e: os.path.exists
    -d: os.path.isdir
    -f: os.path.isfile

Unix commands
    mkdir -p     os.makedirs(path)
    pwd          os.getcwd()
    cd           os.chdir(path)
    ls           os.listdir(path)
    find         os.path.walk(path, visit_fun, arg)

----------
Reflection
----------

getattr(a,'hello')
hasattr(a,'hello')
sys.modules[__name__].main()
eval()
execfile()

----
wget
----

import urllib2
response = urllib2.urlopen('http://python.org/').read()

----
Misc
----

python -m SimpleHTTPServer 8080
s.splitlines()
