----
Date
----

Datetime representations:
    timestamp (float) -- seconds since the epoch (tz independent, i.e. it always means UTC)
    struct_time -- a sequence of 9 integers (tz naive)
    datetime -- an object (tz naive [1])

Functions for getting the current datetime:
    time.gmtime() -> current struct_time in UTC
    time.localtime() -> current struct_time in local time
    datetime.utcnow() -> current datetime in UTC
    datetime.now() -> current datetime in local time

Conversion functions:
    time.gmtime(timestamp) -> struct_time in UTC
    time.localtime(timestamp) -> struct_time in local time
    calendar.timegm(struct_time) in UTC -> timestamp
    time.mktime(struct_time) in local time -> timestamp
    datetime.utcfromtimestamp(timestamp) -> datetime in UTC
    datetime.fromtimestamp(timestamp) -> datetime in local time
    datetime.timetuple(self) -> struct_time
    datetime.datetime(*list(struct_time)[0:6]) -> datetime
    datetime_obj.replace(tzinfo=datetime.timezone.utc).timestamp() in UTC -> timestamp

Printing functions:
    time.ctime(timestamp) -> str
    time.asctime(struct_time) -> str
    time.strftime(format, struct_time) -> str
    datetime.isoformat(self) -> str
    datetime.ctime(self) -> str
    datetime.strftime(self) -> str

Parsing functions:
    time.strptime(string, format) -> struct_time
    datetime.strptime(string, format) -> datetime

[1] There is tz aware `datetime` as well, but I don't deal with that here.

----------
Subprocess
----------

Reading the output
    output=`mycmd myarg`
    ==>
    output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]

Pipeline
    output=`dmesg | grep hda`
    ==>
    p1 = Popen(["dmesg"], stdout=PIPE)
    p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
    output = p2.communicate()[0]

Echo into process
    echo text | mycmd
    ==>
    p = subprocess.Popen(['mycmd'], stdin=PIPE)
    p.communicate('text')

Command as a string
    subprocess.call("mycmd myarg", shell=True)

Command as a list
    subprocess.call(["mycmd", "myarg"])

System call
    sts = os.system("mycmd myarg")
    ==>
    p = Popen("mycmd myarg", shell=True)
    sts = os.waitpid(p.pid, 0)[1]

-------------
File handling
-------------

Temporary file
    fd, filename = tempfile.mkstemp([suffix, prefix])
    os.close(fd)

Temporary directory
    dirname = tempfile.mkdtemp([suffix, prefix])

abspath, basename, pathname:
    os.path.abspath(path)
    os.path.basename(path)
    os.path.dirname(path)
    os.path.normpath(path)

Tests:
    -e: os.path.exists
    -d: os.path.isdir
    -f: os.path.isfile

Unix commands
    mkdir -p     os.makedirs(path)
    pwd          os.getcwd()
    cd           os.chdir(path)
    ls           os.listdir(path)
    find         os.path.walk(path, visit_fun, arg)
    rm           os.remove(path)
    mv           os.rename(src, dst)

Traverse a directory tree ("find"):

    import fnmatch
    import os

    rootPath = '..'
    pattern = '*.txt'

    for root, dirs, files in os.walk(rootPath):
        for filename in fnmatch.filter(files, pattern):
            print os.path.join(root, filename)

----------------------------------
Commands line arguments / optparse
----------------------------------

# See also argparse below, that is more modern!

import optparse

def parse_args():
    usage = ('Usage: MyProgram [options]\n'
             'Description: it does nothing yet')
    parser = optparse.OptionParser(usage=usage)

    parser.add_option('-b', '--battery-name', dest='battery_name',
                      help='Battery name.',
                      action='store', default='BAT0')
    parser.add_option('-v', '--verbose', dest='verbose',
                      help='Verbose output',
                      action='store_true', default=False)

    (cmdl_options, args) = parser.parse_args()
    return cmdl_options, args

def main(options, args):
    if options.verbose:
        pass

if __name__ == '__main__':
    main(*parse_args())

----------------------------------
Commands line arguments / argparse
----------------------------------

import argparse

def parse_args():
    description = "description: process some stuff."
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('-b', '--battery-name', dest='battery_name',
                        help='Battery name.',
                        action='store', default='BAT0')
    parser.add_argument('-v', '--verbose', dest='verbose',
                        help='Verbose output.',
                        action='store_true', default=False)
    parser.add_argument('files', nargs='+')

    return parser.parse_args()

def main(args):
    if args.verbose:
        pass

if __name__ == '__main__':
    main(parse_args())

----------
Reflection
----------

getattr(a,'hello')
hasattr(a,'hello')
sys.modules[__name__].main()
eval()
execfile()

----
wget
----

import urllib2
response = urllib2.urlopen('http://python.org/').read()

---------
Profiling
---------

Profiling a function call:

    import cProfile
    cProfile.runctx("1 + 1", globals(), locals(), sort='time')

Profiling a script:

    python -m cProfile -s time myscript.py

Profiling a script 2:

    python -m cProfile -s time -o prof.txt myscript.py; python p.py
    cat >> p.py <<EOF
import pstats
pstats.Stats('prof.txt').strip_dirs().sort_stats('cumulative').print_stats()
# 'time' sorting is also useful
EOF

----
Misc
----

python -m SimpleHTTPServer 8080
s.splitlines()
