Loading modules
---------------

code:purge(mymodule).
    Purges mymodule.
code:load_file(mymodule).
code:load_abs("/home/me/mymodule"). % no ".beam"
    Loads mymodule.
l(mymodule), nl(mymodule)
    Loads mymodule to this or all nodes.
c("/home/me/mymodule"). % no ".beam"
    Compiles and loads mymodule.
m()
    Shows loaded modules.

Manual pages: erl, erlang, shell, code, c

Processes
---------

processes()
pid(A, B, C)
process_info(Pid), process_info(Pid, backtrace)
is_pid()
is_process_alive(Pid)
exit(Pid, kill)
pid_to_list()
erlang:process_display(LocalPid, backtrace)
rpc:pinfo(Pid), rpc:pinfo(Pid, Item)
registered(), whereis()
global:registered_names(), global:whereis_name(Name).

Ports
-----

erlang:ports()
erlang:port_info(Port), erlang:port_info(Port, Item)
is_port()
erlang:port_to_list(Port)

Nodes
-----

is_alive()
    Returns true if the local node is alive
node(), nodes()
node(Arg)
    Returns the node where Arg is located. Arg can be a pid, a reference, or a
    port
nodes(Arg | [Arg]), Arg = visible | hidden | connected | this | known
net_adm:ping(Node)

dbg
---

http://stackoverflow.com/questions/1954894/using-trace-and-dbg-in-erlang

dbg:tracer().
dbg:tracer(port,dbg:trace_port(file,"/proj/netsimproj/ecsahoc/work/tr/12245_mscbc/dbg/1")).

dbg:p(all, call).
dbg:p(all, [call, timestamp]).
dbg:tpl(Module, []).
dbg:tpl(Module, Function, Arity, []).
    Print all calls to the functions of Module - only for exported functions.
    For all functions, use dbg:tp.
dbg:stop_clear().


Diagnostic
----------

toolbar:start()
erlang:get_stacktrace()
    Get the stacktrace of the last exception in the calling process
dtop:start, timer:sleep(5000).
    top
dtop:sort(mem)
    Sort by memory usage
sys:get_status(pid(0,187,0))
    Get the gen_server's state

Connecting to erlang nodes
--------------------------

erl -name <name of new node> \
    -setcookie <same as the original node's cookie> \
    -kernel <same kernel options as the original node> \
    -remsh <name of the original node>

name of the original node:
    short names: node@host

The HOST environment variable has to be set.

Compiling an OTP module
-----------------------

erlc +debug_info -o ../ebin -I ../include ssl_manager.erl 

